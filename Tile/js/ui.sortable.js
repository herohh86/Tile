/*
 * jQuery UI Sortable 1.10.4
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/sortable/
 *
 * Depends:
 *	jquery.ui.core.js
 *	jquery.ui.mouse.js
 *	jquery.ui.widget.js
 */
(function (a, d) { function c(g, e, f) { return (g > e) && (g < (e + f)) } function b(e) { return (/left|right/).test(e.css("float")) || (/inline|table-cell/).test(e.css("display")) } a.widget("ui.sortable", a.ui.mouse, { version: "1.10.4", widgetEventPrefix: "sort", ready: false, options: { appendTo: "parent", axis: false, connectWith: false, containment: false, cursor: "auto", cursorAt: false, dropOnEmpty: true, forcePlaceholderSize: false, forceHelperSize: false, grid: false, handle: false, helper: "original", items: "> *", opacity: false, placeholder: false, revert: false, scroll: true, scrollSensitivity: 20, scrollSpeed: 20, scope: "default", tolerance: "intersect", zIndex: 1000, activate: null, beforeStop: null, change: null, deactivate: null, out: null, over: null, receive: null, remove: null, sort: null, start: null, stop: null, update: null }, _create: function () { var e = this.options; this.containerCache = {}; this.element.addClass("ui-sortable"); this.refresh(); this.floating = this.items.length ? e.axis === "x" || b(this.items[0].item) : false; this.offset = this.element.offset(); this._mouseInit(); this.ready = true }, _destroy: function () { this.element.removeClass("ui-sortable ui-sortable-disabled"); this._mouseDestroy(); for (var e = this.items.length - 1; e >= 0; e--) { this.items[e].item.removeData(this.widgetName + "-item") } return this }, _setOption: function (e, f) { if (e === "disabled") { this.options[e] = f; this.widget().toggleClass("ui-sortable-disabled", !!f) } else { a.Widget.prototype._setOption.apply(this, arguments) } }, _mouseCapture: function (f, g) { var e = null, i = false, h = this; if (this.reverting) { return false } if (this.options.disabled || this.options.type === "static") { return false } this._refreshItems(f); a(f.target).parents().each(function () { if (a.data(this, h.widgetName + "-item") === h) { e = a(this); return false } }); if (a.data(f.target, h.widgetName + "-item") === h) { e = a(f.target) } if (!e) { return false } if (this.options.handle && !g) { a(this.options.handle, e).find("*").addBack().each(function () { if (this === f.target) { i = true } }); if (!i) { return false } } this.currentItem = e; this._removeCurrentsFromItems(); return true }, _mouseStart: function (f, k, h) { var g, e, j = this.options; this.currentContainer = this; this.refreshPositions(); this.helper = this._createHelper(f); this._cacheHelperProportions(); this._cacheMargins(); this.scrollParent = this.helper.scrollParent(); this.offset = this.currentItem.offset(); this.offset = { top: this.offset.top - this.margins.top, left: this.offset.left - this.margins.left }; a.extend(this.offset, { click: { left: f.pageX - this.offset.left, top: f.pageY - this.offset.top }, parent: this._getParentOffset(), relative: this._getRelativeOffset() }); this.helper.css("position", "absolute"); this.cssPosition = this.helper.css("position"); this.originalPosition = this._generatePosition(f); this.originalPageX = f.pageX; this.originalPageY = f.pageY; (j.cursorAt && this._adjustOffsetFromHelper(j.cursorAt)); this.domPosition = { prev: this.currentItem.prev()[0], parent: this.currentItem.parent()[0] }; if (this.helper[0] !== this.currentItem[0]) { this.currentItem.hide() } this._createPlaceholder(); if (j.containment) { this._setContainment() } if (j.cursor && j.cursor !== "auto") { e = this.document.find("body"); this.storedCursor = e.css("cursor"); e.css("cursor", j.cursor); this.storedStylesheet = a("<style>*{ cursor: " + j.cursor + " !important; }</style>").appendTo(e) } if (j.opacity) { if (this.helper.css("opacity")) { this._storedOpacity = this.helper.css("opacity") } this.helper.css("opacity", j.opacity) } if (j.zIndex) { if (this.helper.css("zIndex")) { this._storedZIndex = this.helper.css("zIndex") } this.helper.css("zIndex", j.zIndex) } if (this.scrollParent[0] !== document && this.scrollParent[0].tagName !== "HTML") { this.overflowOffset = this.scrollParent.offset() } this._trigger("start", f, this._uiHash()); if (!this._preserveHelperProportions) { this._cacheHelperProportions() } if (!h) { for (g = this.containers.length - 1; g >= 0; g--) { this.containers[g]._trigger("activate", f, this._uiHash(this)) } } if (a.ui.ddmanager) { a.ui.ddmanager.current = this } if (a.ui.ddmanager && !j.dropBehaviour) { a.ui.ddmanager.prepareOffsets(this, f) } this.dragging = true; this.helper.addClass("ui-sortable-helper"); this._mouseDrag(f); return true }, _mouseDrag: function (e) { var f, h, j, g, k = this.options, l = false; this.position = this._generatePosition(e); this.positionAbs = this._convertPositionTo("absolute"); if (!this.lastPositionAbs) { this.lastPositionAbs = this.positionAbs } if (this.options.scroll) { if (this.scrollParent[0] !== document && this.scrollParent[0].tagName !== "HTML") { if ((this.overflowOffset.top + this.scrollParent[0].offsetHeight) - e.pageY < k.scrollSensitivity) { this.scrollParent[0].scrollTop = l = this.scrollParent[0].scrollTop + k.scrollSpeed } else { if (e.pageY - this.overflowOffset.top < k.scrollSensitivity) { this.scrollParent[0].scrollTop = l = this.scrollParent[0].scrollTop - k.scrollSpeed } } if ((this.overflowOffset.left + this.scrollParent[0].offsetWidth) - e.pageX < k.scrollSensitivity) { this.scrollParent[0].scrollLeft = l = this.scrollParent[0].scrollLeft + k.scrollSpeed } else { if (e.pageX - this.overflowOffset.left < k.scrollSensitivity) { this.scrollParent[0].scrollLeft = l = this.scrollParent[0].scrollLeft - k.scrollSpeed } } } else { if (e.pageY - a(document).scrollTop() < k.scrollSensitivity) { l = a(document).scrollTop(a(document).scrollTop() - k.scrollSpeed) } else { if (a(window).height() - (e.pageY - a(document).scrollTop()) < k.scrollSensitivity) { l = a(document).scrollTop(a(document).scrollTop() + k.scrollSpeed) } } if (e.pageX - a(document).scrollLeft() < k.scrollSensitivity) { l = a(document).scrollLeft(a(document).scrollLeft() - k.scrollSpeed) } else { if (a(window).width() - (e.pageX - a(document).scrollLeft()) < k.scrollSensitivity) { l = a(document).scrollLeft(a(document).scrollLeft() + k.scrollSpeed) } } } if (l !== false && a.ui.ddmanager && !k.dropBehaviour) { a.ui.ddmanager.prepareOffsets(this, e) } } this.positionAbs = this._convertPositionTo("absolute"); if (!this.options.axis || this.options.axis !== "y") { this.helper[0].style.left = this.position.left + "px" } if (!this.options.axis || this.options.axis !== "x") { this.helper[0].style.top = this.position.top + "px" } for (f = this.items.length - 1; f >= 0; f--) { h = this.items[f]; j = h.item[0]; g = this._intersectsWithPointer(h); if (!g) { continue } if (h.instance !== this.currentContainer) { continue } if (j !== this.currentItem[0] && this.placeholder[g === 1 ? "next" : "prev"]()[0] !== j && !a.contains(this.placeholder[0], j) && (this.options.type === "semi-dynamic" ? !a.contains(this.element[0], j) : true)) { this.direction = g === 1 ? "down" : "up"; if (this.options.tolerance === "pointer" || this._intersectsWithSides(h)) { this._rearrange(e, h) } else { break } this._trigger("change", e, this._uiHash()); break } } this._contactContainers(e); if (a.ui.ddmanager) { a.ui.ddmanager.drag(this, e) } this._trigger("sort", e, this._uiHash()); this.lastPositionAbs = this.positionAbs; return false }, _mouseStop: function (h, i) { if (!h) { return } if (a.ui.ddmanager && !this.options.dropBehaviour) { a.ui.ddmanager.drop(this, h) } if (this.options.revert) { var j = this, g = this.placeholder.offset(), f = this.options.axis, e = {}; if (!f || f === "x") { e.left = g.left - this.offset.parent.left - this.margins.left + (this.offsetParent[0] === document.body ? 0 : this.offsetParent[0].scrollLeft) } if (!f || f === "y") { e.top = g.top - this.offset.parent.top - this.margins.top + (this.offsetParent[0] === document.body ? 0 : this.offsetParent[0].scrollTop) } this.reverting = true; a(this.helper).animate(e, parseInt(this.options.revert, 10) || 500, function () { j._clear(h) }) } else { this._clear(h, i) } return false }, cancel: function () { if (this.dragging) { this._mouseUp({ target: null }); if (this.options.helper === "original") { this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper") } else { this.currentItem.show() } for (var e = this.containers.length - 1; e >= 0; e--) { this.containers[e]._trigger("deactivate", null, this._uiHash(this)); if (this.containers[e].containerCache.over) { this.containers[e]._trigger("out", null, this._uiHash(this)); this.containers[e].containerCache.over = 0 } } } if (this.placeholder) { if (this.placeholder[0].parentNode) { this.placeholder[0].parentNode.removeChild(this.placeholder[0]) } if (this.options.helper !== "original" && this.helper && this.helper[0].parentNode) { this.helper.remove() } a.extend(this, { helper: null, dragging: false, reverting: false, _noFinalSort: null }); if (this.domPosition.prev) { a(this.domPosition.prev).after(this.currentItem) } else { a(this.domPosition.parent).prepend(this.currentItem) } } return this }, serialize: function (f) { var e = this._getItemsAsjQuery(f && f.connected), g = []; f = f || {}; a(e).each(function () { var h = (a(f.item || this).attr(f.attribute || "id") || "").match(f.expression || (/(.+)[\-=_](.+)/)); if (h) { g.push((f.key || h[1] + "[]") + "=" + (f.key && f.expression ? h[1] : h[2])) } }); if (!g.length && f.key) { g.push(f.key + "=") } return g.join("&") }, toArray: function (f) { var e = this._getItemsAsjQuery(f && f.connected), g = []; f = f || {}; e.each(function () { g.push(a(f.item || this).attr(f.attribute || "id") || "") }); return g }, _intersectsWith: function (k) { var p = this.positionAbs.left, q = p + this.helperProportions.width, s = this.positionAbs.top, u = s + this.helperProportions.height, m = k.left, n = m + k.width, o = k.top, e = o + k.height, g = this.offset.click.top, f = this.offset.click.left, i = (this.options.axis === "x") || ((s + g) > o && (s + g) < e), j = (this.options.axis === "y") || ((p + f) > m && (p + f) < n), h = i && j; if (this.options.tolerance === "pointer" || this.options.forcePointerForContainers || (this.options.tolerance !== "pointer" && this.helperProportions[this.floating ? "width" : "height"] > k[this.floating ? "width" : "height"])) { return h } else { return (m < p + (this.helperProportions.width / 2) && q - (this.helperProportions.width / 2) < n && o < s + (this.helperProportions.height / 2) && u - (this.helperProportions.height / 2) < e) } }, _intersectsWithPointer: function (i) { var g = (this.options.axis === "x") || c(this.positionAbs.top + this.offset.click.top, i.top, i.height), h = (this.options.axis === "y") || c(this.positionAbs.left + this.offset.click.left, i.left, i.width), f = g && h, j = this._getDragVerticalDirection(), e = this._getDragHorizontalDirection(); if (!f) { return false } return this.floating ? (((e && e === "right") || j === "down") ? 2 : 1) : (j && (j === "down" ? 2 : 1)) }, _intersectsWithSides: function (h) { var f = c(this.positionAbs.top + this.offset.click.top, h.top + (h.height / 2), h.height), g = c(this.positionAbs.left + this.offset.click.left, h.left + (h.width / 2), h.width), i = this._getDragVerticalDirection(), e = this._getDragHorizontalDirection(); if (this.floating && e) { return ((e === "right" && g) || (e === "left" && !g)) } else { return i && ((i === "down" && f) || (i === "up" && !f)) } }, _getDragVerticalDirection: function () { var e = this.positionAbs.top - this.lastPositionAbs.top; return e !== 0 && (e > 0 ? "down" : "up") }, _getDragHorizontalDirection: function () { var e = this.positionAbs.left - this.lastPositionAbs.left; return e !== 0 && (e > 0 ? "right" : "left") }, refresh: function (e) { this._refreshItems(e); this.refreshPositions(); return this }, _connectWith: function () { var e = this.options; return e.connectWith.constructor === String ? [e.connectWith] : e.connectWith }, _getItemsAsjQuery: function (f) { var k, n, h, l, m = [], o = [], g = this._connectWith(); if (g && f) { for (k = g.length - 1; k >= 0; k--) { h = a(g[k]); for (n = h.length - 1; n >= 0; n--) { l = a.data(h[n], this.widgetFullName); if (l && l !== this && !l.options.disabled) { o.push([a.isFunction(l.options.items) ? l.options.items.call(l.element) : a(l.options.items, l.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"), l]) } } } } o.push([a.isFunction(this.options.items) ? this.options.items.call(this.element, null, { options: this.options, item: this.currentItem }) : a(this.options.items, this.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"), this]); function e() { m.push(this) } for (k = o.length - 1; k >= 0; k--) { o[k][0].each(e) } return a(m) }, _removeCurrentsFromItems: function () { var e = this.currentItem.find(":data(" + this.widgetName + "-item)"); this.items = a.grep(this.items, function (f) { for (var g = 0; g < e.length; g++) { if (e[g] === f.item[0]) { return false } } return true }) }, _refreshItems: function (h) { this.items = []; this.containers = [this]; var k, o, g, l, r, e, m, q, n = this.items, p = [[a.isFunction(this.options.items) ? this.options.items.call(this.element[0], h, { item: this.currentItem }) : a(this.options.items, this.element), this]], f = this._connectWith(); if (f && this.ready) { for (k = f.length - 1; k >= 0; k--) { g = a(f[k]); for (o = g.length - 1; o >= 0; o--) { l = a.data(g[o], this.widgetFullName); if (l && l !== this && !l.options.disabled) { p.push([a.isFunction(l.options.items) ? l.options.items.call(l.element[0], h, { item: this.currentItem }) : a(l.options.items, l.element), l]); this.containers.push(l) } } } } for (k = p.length - 1; k >= 0; k--) { r = p[k][1]; e = p[k][0]; for (o = 0, q = e.length; o < q; o++) { m = a(e[o]); m.data(this.widgetName + "-item", r); n.push({ item: m, instance: r, width: 0, height: 0, left: 0, top: 0 }) } } }, refreshPositions: function (e) { if (this.offsetParent && this.helper) { this.offset.parent = this._getParentOffset() } var f, g, j, h; for (f = this.items.length - 1; f >= 0; f--) { g = this.items[f]; if (g.instance !== this.currentContainer && this.currentContainer && g.item[0] !== this.currentItem[0]) { continue } j = this.options.toleranceElement ? a(this.options.toleranceElement, g.item) : g.item; if (!e) { g.width = j.outerWidth(); g.height = j.outerHeight() } h = j.offset(); g.left = h.left; g.top = h.top } if (this.options.custom && this.options.custom.refreshContainers) { this.options.custom.refreshContainers.call(this) } else { for (f = this.containers.length - 1; f >= 0; f--) { h = this.containers[f].element.offset(); this.containers[f].containerCache.left = h.left; this.containers[f].containerCache.top = h.top; this.containers[f].containerCache.width = this.containers[f].element.outerWidth(); this.containers[f].containerCache.height = this.containers[f].element.outerHeight() } } return this }, _createPlaceholder: function (g) { g = g || this; var e, f = g.options; if (!f.placeholder || f.placeholder.constructor === String) { e = f.placeholder; f.placeholder = { element: function () { var i = g.currentItem[0].nodeName.toLowerCase(), h = a("<" + i + ">", g.document[0]).addClass(e || g.currentItem[0].className + " ui-sortable-placeholder").removeClass("ui-sortable-helper"); if (i === "tr") { g.currentItem.children().each(function () { a("<td>&#160;</td>", g.document[0]).attr("colspan", a(this).attr("colspan") || 1).appendTo(h) }) } else { if (i === "img") { h.attr("src", g.currentItem.attr("src")) } } if (!e) { h.css("visibility", "hidden") } return h }, update: function (h, i) { if (e && !f.forcePlaceholderSize) { return } if (!i.height()) { i.height(g.currentItem.innerHeight() - parseInt(g.currentItem.css("paddingTop") || 0, 10) - parseInt(g.currentItem.css("paddingBottom") || 0, 10)) } if (!i.width()) { i.width(g.currentItem.innerWidth() - parseInt(g.currentItem.css("paddingLeft") || 0, 10) - parseInt(g.currentItem.css("paddingRight") || 0, 10)) } } } } g.placeholder = a(f.placeholder.element.call(g.element, g.currentItem)); g.currentItem.after(g.placeholder); f.placeholder.update(g, g.placeholder) }, _contactContainers: function (h) { var l, p, g, o, r, s, e, f, q, k, m = null, n = null; for (l = this.containers.length - 1; l >= 0; l--) { if (a.contains(this.currentItem[0], this.containers[l].element[0])) { continue } if (this._intersectsWith(this.containers[l].containerCache)) { if (m && a.contains(this.containers[l].element[0], m.element[0])) { continue } m = this.containers[l]; n = l } else { if (this.containers[l].containerCache.over) { this.containers[l]._trigger("out", h, this._uiHash(this)); this.containers[l].containerCache.over = 0 } } } if (!m) { return } if (this.containers.length === 1) { if (!this.containers[n].containerCache.over) { this.containers[n]._trigger("over", h, this._uiHash(this)); this.containers[n].containerCache.over = 1 } } else { g = 10000; o = null; k = m.floating || b(this.currentItem); r = k ? "left" : "top"; s = k ? "width" : "height"; e = this.positionAbs[r] + this.offset.click[r]; for (p = this.items.length - 1; p >= 0; p--) { if (!a.contains(this.containers[n].element[0], this.items[p].item[0])) { continue } if (this.items[p].item[0] === this.currentItem[0]) { continue } if (k && !c(this.positionAbs.top + this.offset.click.top, this.items[p].top, this.items[p].height)) { continue } f = this.items[p].item.offset()[r]; q = false; if (Math.abs(f - e) > Math.abs(f + this.items[p][s] - e)) { q = true; f += this.items[p][s] } if (Math.abs(f - e) < g) { g = Math.abs(f - e); o = this.items[p]; this.direction = q ? "up" : "down" } } if (!o && !this.options.dropOnEmpty) { return } if (this.currentContainer === this.containers[n]) { return } o ? this._rearrange(h, o, null, true) : this._rearrange(h, null, this.containers[n].element, true); this._trigger("change", h, this._uiHash()); this.containers[n]._trigger("change", h, this._uiHash(this)); this.currentContainer = this.containers[n]; this.options.placeholder.update(this.currentContainer, this.placeholder); this.containers[n]._trigger("over", h, this._uiHash(this)); this.containers[n].containerCache.over = 1 } }, _createHelper: function (e) { var g = this.options, f = a.isFunction(g.helper) ? a(g.helper.apply(this.element[0], [e, this.currentItem])) : (g.helper === "clone" ? this.currentItem.clone() : this.currentItem); if (!f.parents("body").length) { a(g.appendTo !== "parent" ? g.appendTo : this.currentItem[0].parentNode)[0].appendChild(f[0]) } if (f[0] === this.currentItem[0]) { this._storedCSS = { width: this.currentItem[0].style.width, height: this.currentItem[0].style.height, position: this.currentItem.css("position"), top: this.currentItem.css("top"), left: this.currentItem.css("left") } } if (!f[0].style.width || g.forceHelperSize) { f.width(this.currentItem.width()) } if (!f[0].style.height || g.forceHelperSize) { f.height(this.currentItem.height()) } return f }, _adjustOffsetFromHelper: function (e) { if (typeof e === "string") { e = e.split(" ") } if (a.isArray(e)) { e = { left: +e[0], top: +e[1] || 0 } } if ("left" in e) { this.offset.click.left = e.left + this.margins.left } if ("right" in e) { this.offset.click.left = this.helperProportions.width - e.right + this.margins.left } if ("top" in e) { this.offset.click.top = e.top + this.margins.top } if ("bottom" in e) { this.offset.click.top = this.helperProportions.height - e.bottom + this.margins.top } }, _getParentOffset: function () { this.offsetParent = this.helper.offsetParent(); var e = this.offsetParent.offset(); if (this.cssPosition === "absolute" && this.scrollParent[0] !== document && a.contains(this.scrollParent[0], this.offsetParent[0])) { e.left += this.scrollParent.scrollLeft(); e.top += this.scrollParent.scrollTop() } if (this.offsetParent[0] === document.body || (this.offsetParent[0].tagName && this.offsetParent[0].tagName.toLowerCase() === "html" && a.ui.ie)) { e = { top: 0, left: 0 } } return { top: e.top + (parseInt(this.offsetParent.css("borderTopWidth"), 10) || 0), left: e.left + (parseInt(this.offsetParent.css("borderLeftWidth"), 10) || 0) } }, _getRelativeOffset: function () { if (this.cssPosition === "relative") { var e = this.currentItem.position(); return { top: e.top - (parseInt(this.helper.css("top"), 10) || 0) + this.scrollParent.scrollTop(), left: e.left - (parseInt(this.helper.css("left"), 10) || 0) + this.scrollParent.scrollLeft() } } else { return { top: 0, left: 0 } } }, _cacheMargins: function () { this.margins = { left: (parseInt(this.currentItem.css("marginLeft"), 10) || 0), top: (parseInt(this.currentItem.css("marginTop"), 10) || 0) } }, _cacheHelperProportions: function () { this.helperProportions = { width: this.helper.outerWidth(), height: this.helper.outerHeight() } }, _setContainment: function () { var e, f, h, g = this.options; if (g.containment === "parent") { g.containment = this.helper[0].parentNode } if (g.containment === "document" || g.containment === "window") { this.containment = [0 - this.offset.relative.left - this.offset.parent.left, 0 - this.offset.relative.top - this.offset.parent.top, a(g.containment === "document" ? document : window).width() - this.helperProportions.width - this.margins.left, (a(g.containment === "document" ? document : window).height() || document.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top] } if (!(/^(document|window|parent)$/).test(g.containment)) { e = a(g.containment)[0]; f = a(g.containment).offset(); h = (a(e).css("overflow") !== "hidden"); this.containment = [f.left + (parseInt(a(e).css("borderLeftWidth"), 10) || 0) + (parseInt(a(e).css("paddingLeft"), 10) || 0) - this.margins.left, f.top + (parseInt(a(e).css("borderTopWidth"), 10) || 0) + (parseInt(a(e).css("paddingTop"), 10) || 0) - this.margins.top, f.left + (h ? Math.max(e.scrollWidth, e.offsetWidth) : e.offsetWidth) - (parseInt(a(e).css("borderLeftWidth"), 10) || 0) - (parseInt(a(e).css("paddingRight"), 10) || 0) - this.helperProportions.width - this.margins.left, f.top + (h ? Math.max(e.scrollHeight, e.offsetHeight) : e.offsetHeight) - (parseInt(a(e).css("borderTopWidth"), 10) || 0) - (parseInt(a(e).css("paddingBottom"), 10) || 0) - this.helperProportions.height - this.margins.top] } }, _convertPositionTo: function (e, g) { if (!g) { g = this.position } var f = e === "absolute" ? 1 : -1, h = this.cssPosition === "absolute" && !(this.scrollParent[0] !== document && a.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent, i = (/(html|body)/i).test(h[0].tagName); return { top: (g.top + this.offset.relative.top * f + this.offset.parent.top * f - ((this.cssPosition === "fixed" ? -this.scrollParent.scrollTop() : (i ? 0 : h.scrollTop())) * f)), left: (g.left + this.offset.relative.left * f + this.offset.parent.left * f - ((this.cssPosition === "fixed" ? -this.scrollParent.scrollLeft() : i ? 0 : h.scrollLeft()) * f)) } }, _generatePosition: function (e) { var l, f, g = this.options, h = e.pageX, i = e.pageY, j = this.cssPosition === "absolute" && !(this.scrollParent[0] !== document && a.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent, k = (/(html|body)/i).test(j[0].tagName); if (this.cssPosition === "relative" && !(this.scrollParent[0] !== document && this.scrollParent[0] !== this.offsetParent[0])) { this.offset.relative = this._getRelativeOffset() } if (this.originalPosition) { if (this.containment) { if (e.pageX - this.offset.click.left < this.containment[0]) { h = this.containment[0] + this.offset.click.left } if (e.pageY - this.offset.click.top < this.containment[1]) { i = this.containment[1] + this.offset.click.top } if (e.pageX - this.offset.click.left > this.containment[2]) { h = this.containment[2] + this.offset.click.left } if (e.pageY - this.offset.click.top > this.containment[3]) { i = this.containment[3] + this.offset.click.top } } if (g.grid) { l = this.originalPageY + Math.round((i - this.originalPageY) / g.grid[1]) * g.grid[1]; i = this.containment ? ((l - this.offset.click.top >= this.containment[1] && l - this.offset.click.top <= this.containment[3]) ? l : ((l - this.offset.click.top >= this.containment[1]) ? l - g.grid[1] : l + g.grid[1])) : l; f = this.originalPageX + Math.round((h - this.originalPageX) / g.grid[0]) * g.grid[0]; h = this.containment ? ((f - this.offset.click.left >= this.containment[0] && f - this.offset.click.left <= this.containment[2]) ? f : ((f - this.offset.click.left >= this.containment[0]) ? f - g.grid[0] : f + g.grid[0])) : f } } return { top: (i - this.offset.click.top - this.offset.relative.top - this.offset.parent.top + ((this.cssPosition === "fixed" ? -this.scrollParent.scrollTop() : (k ? 0 : j.scrollTop())))), left: (h - this.offset.click.left - this.offset.relative.left - this.offset.parent.left + ((this.cssPosition === "fixed" ? -this.scrollParent.scrollLeft() : k ? 0 : j.scrollLeft()))) } }, _rearrange: function (g, j, e, h) { e ? e[0].appendChild(this.placeholder[0]) : j.item[0].parentNode.insertBefore(this.placeholder[0], (this.direction === "down" ? j.item[0] : j.item[0].nextSibling)); this.counter = this.counter ? ++this.counter : 1; var f = this.counter; this._delay(function () { if (f === this.counter) { this.refreshPositions(!h) } }) }, _clear: function (g, j) { this.reverting = false; var h, e = []; if (!this._noFinalSort && this.currentItem.parent().length) { this.placeholder.before(this.currentItem) } this._noFinalSort = null; if (this.helper[0] === this.currentItem[0]) { for (h in this._storedCSS) { if (this._storedCSS[h] === "auto" || this._storedCSS[h] === "static") { this._storedCSS[h] = "" } } this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper") } else { this.currentItem.show() } if (this.fromOutside && !j) { e.push(function (i) { this._trigger("receive", i, this._uiHash(this.fromOutside)) }) } if ((this.fromOutside || this.domPosition.prev !== this.currentItem.prev().not(".ui-sortable-helper")[0] || this.domPosition.parent !== this.currentItem.parent()[0]) && !j) { e.push(function (i) { this._trigger("update", i, this._uiHash()) }) } if (this !== this.currentContainer) { if (!j) { e.push(function (i) { this._trigger("remove", i, this._uiHash()) }); e.push((function (i) { return function (k) { i._trigger("receive", k, this._uiHash(this)) } }).call(this, this.currentContainer)); e.push((function (i) { return function (k) { i._trigger("update", k, this._uiHash(this)) } }).call(this, this.currentContainer)) } } function f(l, k, i) { return function (m) { i._trigger(l, m, k._uiHash(k)) } } for (h = this.containers.length - 1; h >= 0; h--) { if (!j) { e.push(f("deactivate", this, this.containers[h])) } if (this.containers[h].containerCache.over) { e.push(f("out", this, this.containers[h])); this.containers[h].containerCache.over = 0 } } if (this.storedCursor) { this.document.find("body").css("cursor", this.storedCursor); this.storedStylesheet.remove() } if (this._storedOpacity) { this.helper.css("opacity", this._storedOpacity) } if (this._storedZIndex) { this.helper.css("zIndex", this._storedZIndex === "auto" ? "" : this._storedZIndex) } this.dragging = false; if (this.cancelHelperRemoval) { if (!j) { this._trigger("beforeStop", g, this._uiHash()); for (h = 0; h < e.length; h++) { e[h].call(this, g) } this._trigger("stop", g, this._uiHash()) } this.fromOutside = false; return false } if (!j) { this._trigger("beforeStop", g, this._uiHash()) } this.placeholder[0].parentNode.removeChild(this.placeholder[0]); if (this.helper[0] !== this.currentItem[0]) { this.helper.remove() } this.helper = null; if (!j) { for (h = 0; h < e.length; h++) { e[h].call(this, g) } this._trigger("stop", g, this._uiHash()) } this.fromOutside = false; return true }, _trigger: function () { if (a.Widget.prototype._trigger.apply(this, arguments) === false) { this.cancel() } }, _uiHash: function (e) { var f = e || this; return { helper: f.helper, placeholder: f.placeholder || a([]), position: f.position, originalPosition: f.originalPosition, offset: f.positionAbs, item: f.currentItem, sender: e ? e.element : null } } }) })(jQuery);